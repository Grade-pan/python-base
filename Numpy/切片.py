import numpy as np

# 基本切片语法是 i:j:k，其中 i 是起始索引，j 是停止索引，k 是步骤（k\neq0）。这将选择具有索引值（在相应的维度中）
# i, i+k, ..., i+(m-1) k 的 m 个元素，其中 m = q + (r\neq0)，q 和 r 是 j-i 除以 k 得到的商和余数：j - i = q k + r，
# 使得i + ( m - 1 ) k < j。
x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(x[1:7:1])
# 假设n是被切片的维度中的元素的数量。 然后，如果没有给出 i，则对于 k > 0 ，它默认为 0，对于 k < 0，它默认为 n - 1。
# 如果没有给出j，则对于k > 0，它默认为n，对于k < 0，则默认为 - n - 1。
# 如果没有给定k，则默认为1。请注意 :: 与 : 相同，表示选择沿此轴的所有索引
print(x[5:])
print(x[::3])
# 如果选择元组中的对象数小于 N ，则 : 假定任何后续维
y = np.array([[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]]])
print(y.shape)
# 在进行切片过程中，可以根据逗号判断切片是如何选取元素的，例如三维数组中基本模式是[个数，行数，列数]
# b[1,::]代表了行列全取的情况下，第2个数组（重点是根据逗号索引第一个逗号代表个数，后面：：之前无逗号可以整体切片）
# b[:,:, 1]代表了分开取个数、行、列（重点是个数和行之后都有逗号，则分开选取而不是整体切片），分开切片个数，行全选情况下选第二列元素
print(y[0:1, 1, 0])  # 选取第m到n维的第2列第一行
print(y[0])
print(y[0, :, :])
z = np.zeros((2, 2), dtype=[('a', np.int32), ('b', np.float64, (3, 3))])
print(z['a'].dtype)
